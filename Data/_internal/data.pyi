from typing import (
    Dict, List, Any, Optional, Type, TypeVar, Generic, 
    Literal, overload, KeysView, ValuesView, ItemsView
)
from .meta import DataMeta

__all__ = ("Data", "V", "DictSchema")

V = TypeVar("V")
DictSchema = Dict[str, V]

class Data(Generic[V], metaclass=DataMeta):
    def __init__(self, value: Optional[DictSchema] = None, /, **kwargs: Any) -> None: ...
    @property
    def meta(self) -> Dict[str, Any]: ...
    def __get_incorrect_typing__(self) -> List[str]: ...
    def __raise_typing_error__(self) -> None: ...
    def __get_content__(self) -> DictSchema: ...
    def copy(self) -> "Data[V]": ...
    @classmethod
    def from_dict(cls: Type["Data[V]"], data: DictSchema) -> "Data[V]": ...
    def to_dict(self) -> DictSchema: ...
    def keys(self) -> KeysView[str]: ...
    def values(self) -> ValuesView[V]: ...
    def items(self) -> ItemsView[str, V]: ...
    @overload
    def get(self, key: str, default: Literal[None] = None) -> Optional[V]: ...
    @overload
    def get(self, key: str, default: V) -> V: ...
    def get(self, key: str, default: Optional[V] = None) -> Optional[V]: ...
    @overload
    def setdefault(self, key: str, default: Literal[None] = None) -> Optional[V]: ...
    @overload
    def setdefault(self, key: str, default: V) -> V: ...
    def setdefault(self, key: str, default: Optional[V] = None) -> Optional[V]: ...
    @overload
    def pop(self, key: str, default: Literal[None] = None) -> Optional[V]: ...
    @overload
    def pop(self, key: str, default: V) -> V: ...
    def pop(self, key: str, default: Optional[V] = None) -> Optional[V]: ...
    def update(self, data: DictSchema) -> None: ...
    def clear(self) -> None: ...
    def __call__(self, key: str, *args: Any, **kwargs: Any) -> Any: ...
    def __getattribute__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __getitem__(self, key: str) -> V: ...
    def __setitem__(self, key: str, value: V) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __contains__(self, key: str) -> bool: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...